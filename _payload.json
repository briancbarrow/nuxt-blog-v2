[{"data":1,"prerenderedAt":1457},["ShallowReactive",2],{"blog":3},[4,77,213,393,452,697,1426],{"id":5,"title":6,"body":7,"date":65,"description":66,"extension":67,"img":68,"meta":69,"navigation":71,"path":72,"published":71,"seo":73,"stem":74,"tags":75,"__hash__":76},"blog/blog/understanding-vue-composables.md","Understanding Vue Composables",{"type":8,"value":9,"toc":62},"minimal",[10,22,43,57],[11,12,13,14,21],"p",{},"In ",[15,16,20],"a",{"href":17,"rel":18},"https://www.freecodecamp.org/news/how-vue-composables-work/",[19],"nofollow","my recent post for freeCodeCamp",", I looked at how Vue Composables can be used to simplify and reuse stateful logic across your Vue 3 applications. While the documentation covers things well, I dive a little deeper with some examples that demonstrate:",[23,24,25,29,32,40],"ul",{},[26,27,28],"li",{},"Why composables are essential for DRY code in modern Vue apps",[26,30,31],{},"A simple counter composable implementation to understand the fundamentals",[26,33,34,35,39],{},"A more complex ",[36,37,38],"code",{},"useAsyncState"," composable for robust API request handling",[26,41,42],{},"Real-world usage patterns with proper TypeScript typing",[11,44,45,46,51,52,56],{},"I hope you enjoy the post. Let me know on ",[15,47,50],{"href":48,"rel":49},"https://www.linkedin.com/in/barrowbrian/",[19],"LinkedIn"," or ",[15,53,55],{"href":54},"","BlueSky"," what you think!",[11,58,59],{},[15,60,17],{"href":17,"rel":61},[19],{"title":54,"searchDepth":63,"depth":63,"links":64},2,[],"2025-06-11T00:00:00.000Z","Learn how to use Vue composables to simplify and reuse stateful logic in your Vue 3 apps, with practical examples and tips for real-world projects.","md","how-vue-composables-work.png",{"alt":70},"understanding vue composables",true,"/blog/understanding-vue-composables",{"title":6,"description":66},"blog/understanding-vue-composables",[],"LYN8ikFr_oHwe7c7uH-urF6ez2lNSBq-jrw-iaU1o8c",{"id":78,"title":79,"body":80,"date":203,"description":204,"extension":67,"img":205,"meta":206,"navigation":71,"path":208,"published":71,"seo":209,"stem":210,"tags":211,"__hash__":212},"blog/blog/soccer-coach-app.md","Building an AI Soccer Coach in Elixir/Phoenix",{"type":8,"value":81,"toc":199},[82,87,90,93,96,99,103,106,111,114,117,120,159,162,165,168,172,175,189,195],[83,84,86],"h1",{"id":85},"the-initial-idea","The initial idea",[11,88,89],{},"A couple of months ago I wrote a small app building an AI agent in NextJS as part of my preparation for a job interview. It was a really fun project that I was able to spin up relatively quickly, but it wasn't a project I revisited after the interview process. The project has been stuck in my mind as something I would like to flesh out more.",[11,91,92],{},"As the coach for both of my sons' soccer teams, I am always trying to find ways to help the kids understand the game better. One thing we have been pushing the kids to do is to reflect on their performances after each game. Taking time to think about how things went is vital for improvement over time. Just like a software team will have a \"Retrospective\" meeting after a sprint cycle, making time to reflect on a soccer game can be just as beneficial for an athlete.",[11,94,95],{},"Obviously, I want to do this within reason, and at a level that will not put too much pressure on the kids. They are only kids after all, and too much pressure isn't healthy.",[11,97,98],{},"I also don't have time to talk to each player individually. We have 27 kids across the two teams so taking time to reflect with each one individually after each game isn't possible. The idea of being able to use AI to prompt the kids to think a little bit deeper about the game and reflect on what they can improve sounded like a really good use of an AI agent.",[83,100,102],{"id":101},"re-writing-in-elixirphoenix","Re-writing in Elixir/Phoenix",[11,104,105],{},"This weekend I decided to come back to the project, but I wanted to start it over and build it in Elixir/Phoenix. Mostly because Elixir has been my hobby language with Phoenix as the framework, but also because I have a couple of interviews coming up this week for Elixir/Phoenix jobs and I wanted to be better prepared for those, while also having a more recent project to speak about during those conversations. I also would like to see this project through to an actual MVP that I could use to send to my players, and in my humble opinion, writing things in Elixir and Phoenix is a lot more fun than writing things in NextJS and React.",[107,108,110],"h2",{"id":109},"improvements","Improvements",[11,112,113],{},"After getting the app to feature parity with the original NextJS version, I realized there were some things I could add/change to make it a little bit easier to use, especially for kids.",[11,115,116],{},"First, getting the conversation started felt awkward. It was dependent on the player making the first message. While they would probably get the hang of it after using it for a while, I wanted to make it easier for the kids to get started, so it made sense to have the AI Coach start the conversation. So I added an easy to see button the user can click that kicks off the conversation with a call to the Anthropic API.",[11,118,119],{},"I also added a clean looking loading indicator for when the Agent is \"thinking\". Using the app before this addition felt really weird. You couldn't tell if it was working or not. I still need to add some sort of message when calls to the AI APIs fail, but just having the loading indicator makes things much nicer. Also, now that DaisyUI is included by default in Phoenix applications, adding a nice looking loading indicator is incredibly easy.",[121,122,126],"pre",{"className":123,"code":124,"language":125,"meta":54,"style":54},"language-elixir shiki shiki-themes github-dark","\u003C%= if @is_loading do %>\n  \u003Cdiv class=\"text-left badge badge-secondary bg-secondary text-secondary-content\">\n    \u003Cspan class=\"loading loading-dots loading-md\">\u003C/span>\n  \u003C/div>\n\u003C% end %>\n","elixir",[36,127,128,136,141,147,153],{"__ignoreMap":54},[129,130,133],"span",{"class":131,"line":132},"line",1,[129,134,135],{},"\u003C%= if @is_loading do %>\n",[129,137,138],{"class":131,"line":63},[129,139,140],{},"  \u003Cdiv class=\"text-left badge badge-secondary bg-secondary text-secondary-content\">\n",[129,142,144],{"class":131,"line":143},3,[129,145,146],{},"    \u003Cspan class=\"loading loading-dots loading-md\">\u003C/span>\n",[129,148,150],{"class":131,"line":149},4,[129,151,152],{},"  \u003C/div>\n",[129,154,156],{"class":131,"line":155},5,[129,157,158],{},"\u003C% end %>\n",[11,160,161],{},"The other thing I really wanted to add was a way for the kids to more easily add their side of the conversation. With the AI Agent being a text based interaction, and most 8 year olds not being great at typing on a keyboard, I thought having a way for them to speak to add their side would be good. Having worked at Deepgram, I knew it would be relatively easy to get a speech-to-text feature added.",[11,163,164],{},"This was a really interesting feature to add in a Phoenix LiveView application. Up to this point, I haven't had a lot of need for JS Hooks in my LiveView projects. Using Claude as a pair programming partner I was able to better understand how Hooks work within LiveView, and get the feature added to my project. Hooks are definitely something I need to look into more, and I also wonder if it would be easier using something like AlpineJS or even LiveSvelte or LiveVue. Those things have been on my list of things to look into, so that will definitely be something I explore in the coming weeks.",[11,166,167],{},"Rather than just submitting the text returned from the speech-to-text, I set it as the value in the textarea, just so the user can edit it if they want. I'll need to look at how that feature gets used to see if the ergonomics of the feature are easy to use. I figured it would be good for now.",[107,169,171],{"id":170},"end-result","End Result",[11,173,174],{},"I think the end result of the project is pretty nice. There are definitely some things I need to add before it can be put into full use, but I think the foundation of the project is solid, and I'm excited to keep working on it.",[11,176,177,178,183,184,188],{},"The ",[15,179,182],{"href":180,"rel":181},"https://github.com/briancbarrow/soccer-reflection-elixir",[19],"code for the project is on my GitHub"," and you can test it out at this link: ",[15,185,186],{"href":186,"rel":187},"https://soccer-reflection-coach.gigalixirapp.com/coach",[19],". Feel free to give it a try. Below is a recording of the project being used.",[11,190,191],{},[192,193],"video",{"src":194,"controls":71},"/ai-soccer-coach/screen-recording.mov",[196,197,198],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"title":54,"searchDepth":63,"depth":63,"links":200},[201,202],{"id":109,"depth":63,"text":110},{"id":170,"depth":63,"text":171},"2025-06-02T00:00:00.000Z","Talking about my fun weekend project.","ai-soccer-coach/cover.png",{"alt":207},"AI Soccer Coach","/blog/soccer-coach-app",{"title":79,"description":204},"blog/soccer-coach-app",null,"wVjWFGsOv3S6Z6Rsn2zwNSdSX9CoLbdpUjbaNRNeZr0",{"id":214,"title":215,"body":216,"date":384,"description":385,"extension":67,"img":386,"meta":387,"navigation":71,"path":389,"published":71,"seo":390,"stem":391,"tags":211,"__hash__":392},"blog/blog/inertia-vs-liveview.md","Phoenix with Inertia.js vs LiveView",{"type":8,"value":217,"toc":378},[218,233,236,240,243,246,250,265,268,271,278,293,297,312,315,356,363,367,370,373,376],[11,219,220,221,226,227,232],{},"I've been messing around with Elixir and Phoenix for a little bit now, and being\na web developer I have definitely played with LiveView. Overall my experience\nhas been positive. A while back I did see this post on Bluesky from\n",[15,222,225],{"href":223,"rel":224},"https://bsky.app/profile/bcardarella.bsky.social/post/3lkv6sioelc2x",[19],"Brian Cardarella","\nhighlighting ",[15,228,231],{"href":229,"rel":230},"https://dnlytras.com/blog/on-liveview",[19],"Dimitrios's blog post","\nabout their experience with LiveView.",[11,234,235],{},"I thought it was a really interesting read, and it was nice to see a new\nperspective on LiveView. I personally haven't had too many issues with it, and\nwhen I did I was typically able to find a decent enough solution using another\ntool like Alpine.js. I was intrigued though by the mention of using Inertia.js\nwith Phoenix. I had heard of Inertia.js before, but I never really looked into\nit. So I decided to do a little digging and see what the differences were\nbetween the two.",[107,237,239],{"id":238},"what-is-inertiajs","What is Inertia.js?",[11,241,242],{},"Inertia.js is a framework-agnostic library that allows you to build modern\nsingle-page applications (SPAs) using server-side routing and controllers. It\nprovides a way to create SPAs without the need for a full-fledged JavaScript\nframework like React or Vue. Instead, you can use your existing server-side\nframework (like Laravel, Rails, or Phoenix) to handle routing and data fetching,\nwhile Inertia.js takes care of the client-side rendering. It was created with\nLaravel in mind, but it has official adapters for other frameworks as well,\nincluding Phoenix.",[11,244,245],{},"The idea behind Inertia.js is to provide a way to build SPAs that feel like\ntraditional server-rendered applications, while still taking advantage of the\nbenefits of client-side rendering. It allows you to use your existing\nserver-side framework to handle routing and data fetching, while still providing\na smooth and responsive user experience.",[107,247,249],{"id":248},"building-a-todo-app","Building a Todo app",[11,251,252,253,258,259,264],{},"In order to properly compare the two, I decided to build a simple Todo app using\nboth ",[15,254,257],{"href":255,"rel":256},"https://github.com/briancbarrow/phoenix_inertia_todo",[19],"Inertia.js"," and\n",[15,260,263],{"href":261,"rel":262},"https://github.com/briancbarrow/phoenix_liveview_todo",[19],"LiveView",". I wanted to\nsee how they compared in terms of ease of use, performance, and overall\ndeveloper experience. Getting a basic CRUD app running with LiveView is pretty\nstraightforward, especially using the Phoenix generators.",[11,266,267],{},"My goal in building the Inertia version was to get it to have a similar look and\nfeel as the LiveView version. This meant the form submission for creating and\nupdating todos would be handled inside of a modal. In my opinion, this is\nhandled very well in LiveView and you can easily create handler functions that\nwill properly validate the form and return any errors, setting them on the\nsocket.",[11,269,270],{},"When using Inertia, I really did like the idea of having the server handle\nthings like routing, data fetching and authentication. As I started to build the\napp with it, things did seem to go relatively smoothly. I was able to get the\nbasic CRUD functionality up and running and still be able to handle flash\nmessages. Getting the \"happy path\" working was fairly straightforward. The\nInertia adapter does also provide an easy to use function for assigning errors\nto the response. But that is where I started to run into some issues.",[11,272,273,274,277],{},"Although Inertia eventually ends up sending a JSON response back to the client,\nit does so by calling the ",[36,275,276],{},"render_inertia"," function which takes in the name of\nthe component to render. It then passes the data to the component and renders\nit. Because my React component was the TodoList page that also had the modal in\nit, I then had to change the shape of my component to pass the appropriate data\nto the modal and make sure it statyed open. That meant my previous iteration of\nthe page component was no longer valid and I was changing how I was interacting\nwith my client side code to make it work. That isn't necessarily a bad thing,\nbut I did start to wonder if this was something I really wanted to do. The whole\npoint of using Inertia was to be able to use my existing knowledge of frontend\nframeworks and not need too much of a paradigm shift building the app. This felt\nlike I was having to change my approach to fit the library. If I am going to do\nthat, I felt like I might as well just embrace the LiveView way of doing things.",[11,279,280,281,286,287,292],{},"I will note that I was using React for the frontend, which is my least favorite\nfrontend framework. I don't have deep familiarity with it, so there is a chance\nthat this boils down to my own skill issues. The fact that there are whole other\nlibraries (see\n",[15,282,285],{"href":283,"rel":284},"https://inertiaui.com/inertia-modal/docs/introduction",[19],"inertia-modal",", as well\nas\n",[15,288,291],{"href":289,"rel":290},"https://laracasts.com/discuss/channels/inertia/inertiajs-to-open-a-route-in-a-modal-window-with-this-package",[19],"this comment thread listing some on Laracasts.com",")\nto make modals work better with Inertia does make me thing that this likely\nisn't just a me issue.",[107,294,296],{"id":295},"testing","Testing",[11,298,299,300,305,306,311],{},"I presented the two different approaches at the Utah Elixir Meetup this week,\nmostly highlighting the positives of Inertia. We often get glowing reviews of\nLiveView in the Elixir space, and I wanted to show that there are other options\nout there. During that presentation I did have a comment/question about the\ndifferences in testing between the two approaches. To be honest, I haven't done\na lot of testing with either approach, but I do know that LiveView has a lot of\nbuilt in testing functionality. Inertia does have some standard approaches to\ntesting that you would expect (end to end, client side unit testing) as well as\n",[15,301,304],{"href":302,"rel":303},"https://inertiajs.com/testing",[19],"endpoint testing",". The adapter for Phoenix does\nprovide some\n",[15,307,310],{"href":308,"rel":309},"https://github.com/inertiajs/inertia-phoenix?tab=readme-ov-file#testing",[19],"decent helpers for testing","\nas well.",[11,313,314],{},"Even with that being said, I do think that LiveView has a leg up on Inertia when\nit comes to testing. The fact that LiveView is built into the framework means\nthat it has a lot of built in functionality that makes testing easier. You can\neasily test the socket and the state of the LiveView, as well as the\ninteractions with the client side code. Inertia, on the other hand, is a\nthird-party library that is built on top of Phoenix. It does a great job of\nproviding a way to build SPAs, but because there is still a level of separation\nbetween the server and the client, I would need to bring in a separate testing\nlibrary to test the client side code. It is so incredibly nice to be able to\nwrite something like this to test a client side interaction with LiveView:",[121,316,318],{"className":123,"code":317,"language":125,"meta":54,"style":54},"test \"saves new task\", %{conn: conn} do\n      {:ok, index_live, _html} = live(conn, ~p\"/tasks\")\n\nassert index_live |> element(\"a\", \"New Task\") |> render_click() =~\n               \"New Task\"\n\nassert_patch(index_live, ~p\"/tasks/new\")\n",[36,319,320,325,330,335,340,345,350],{"__ignoreMap":54},[129,321,322],{"class":131,"line":132},[129,323,324],{},"test \"saves new task\", %{conn: conn} do\n",[129,326,327],{"class":131,"line":63},[129,328,329],{},"      {:ok, index_live, _html} = live(conn, ~p\"/tasks\")\n",[129,331,332],{"class":131,"line":143},[129,333,334],{"emptyLinePlaceholder":71},"\n",[129,336,337],{"class":131,"line":149},[129,338,339],{},"assert index_live |> element(\"a\", \"New Task\") |> render_click() =~\n",[129,341,342],{"class":131,"line":155},[129,343,344],{},"               \"New Task\"\n",[129,346,348],{"class":131,"line":347},6,[129,349,334],{"emptyLinePlaceholder":71},[129,351,353],{"class":131,"line":352},7,[129,354,355],{},"assert_patch(index_live, ~p\"/tasks/new\")\n",[11,357,358,359,362],{},"This is a pretty simple test that tests the rendering of the 'tasks' page and\nthen tests that the correct request is made when the user clicks the \"New Task\"\nbutton. Not to mention that this test is auto generated when using the\n",[36,360,361],{},"phx.gen.live"," generator. If/when you end up changing the way the page works and\nis laid out from what the generator creates, you can still use the generated\ntest as a starting point and still have access to testing the client side code.\nThat is a huge win for LiveView in my opinion.",[107,364,366],{"id":365},"conclusion","Conclusion",[11,368,369],{},"I was pretty excited to try out Inertia.js. I had heard a lot of good things\nabout it, and honestly a lot of the praise for it is well deserved. If you are\ncoming from a traditional SPA background, it is a great way to build SPAs if you\nare fine with needing multiple testing libraries for each side of the app.",[11,371,372],{},"If I was to build a project using a different backend language, I would\ndefinitely consider using Inertia.js.",[11,374,375],{},"For me though, I think I will stick with LiveView for now, at least when working\nwith Phoenix.",[196,377,198],{},{"title":54,"searchDepth":63,"depth":63,"links":379},[380,381,382,383],{"id":238,"depth":63,"text":239},{"id":248,"depth":63,"text":249},{"id":295,"depth":63,"text":296},{"id":365,"depth":63,"text":366},"2025-04-26T00:00:00.000Z","A comparison of Inertia.js and LiveView for building modern web applications.","inertia-vs-liveview/header.jpg",{"alt":388},"The Inertia.js and LiveView logos","/blog/inertia-vs-liveview",{"title":215,"description":385},"blog/inertia-vs-liveview","NkpP1m38ZykPC-ICh6dkMCAhR9z0AUdnw5F_LbS3gVk",{"id":394,"title":395,"body":396,"date":443,"description":444,"extension":67,"img":445,"meta":446,"navigation":71,"path":448,"published":71,"seo":449,"stem":450,"tags":211,"__hash__":451},"blog/blog/understanding-pointers-in-go.md","What are Pointers in Go? A Guide for JavaScript Devs",{"type":8,"value":397,"toc":441},[398,401,404,430,438],[11,399,400],{},"I recently wrote a post for freeCodeCamp that breaks down pointers in\nGo—especially with JavaScript developers in mind. If you've ever felt like\npointers were a bit of a mystery, this one’s for you.",[11,402,403],{},"I cover:",[23,405,406,409,420,423],{},[26,407,408],{},"What pointers actually are (and how they're different from regular variables)",[26,410,411,412,415,416,419],{},"How to use ",[36,413,414],{},"*"," and ",[36,417,418],{},"&"," in Go",[26,421,422],{},"Why pointer receivers matter when working with methods",[26,424,425,426,429],{},"Common pitfalls like ",[36,427,428],{},"nil"," pointers",[11,431,432,433],{},"👉\n",[15,434,437],{"href":435,"rel":436},"https://www.freecodecamp.org/news/what-are-pointers-in-go/",[19],"Read the full post here",[11,439,440],{},"Let me know what you think—or if anything's still fuzzy!",{"title":54,"searchDepth":63,"depth":63,"links":442},[],"2023-04-24T00:00:00.000Z","A look into pointers in Go, tailored for JavaScript developers.","images/pointer.png",{"alt":447},"Library of books","/blog/understanding-pointers-in-go",{"title":395,"description":444},"blog/understanding-pointers-in-go","I8DN89gFaVEc2xH57M71rfRMxi6oXhrrqGESprcwTp8",{"id":453,"title":454,"body":455,"date":688,"description":689,"extension":67,"img":690,"meta":691,"navigation":71,"path":693,"published":71,"seo":694,"stem":695,"tags":211,"__hash__":696},"blog/blog/understanding-vue-directives.md","Understanding Vue Directives",{"type":8,"value":456,"toc":680},[457,465,469,480,496,499,503,508,511,547,562,565,589,596,600,618,622,642,665,668,677],[11,458,459,460,464],{},"⚠️ ",[461,462,463],"strong",{},"NOTE",": This applies to Vue 2. Vue 3 has some changes and the\nfollowing might not apply.",[107,466,468],{"id":467},"what-is-a-directive","What is a directive?",[11,470,471,472,476],{},"So what is a directive in Vue? At the core, ",[473,474,475],"mark",{},"a directive is a \"prefixed\nHTML attribute that tells the library to do something to a DOM\nelement.",[15,477,414],{"href":478,"rel":479},"https://012.vuejs.org/guide/directives.html",[19],[11,481,482,483,489,490,495],{},"In plain English, it is a piece of code that we use to tell Vue to do something\nwith our markup. A couple of the most used directives in Vue are the ",[484,485,486],"em",{},[36,487,488],{},"v-bind","\nand the ",[484,491,492],{},[36,493,494],{},"v-on"," directives.",[11,497,498],{},"You'll notice we mentioned in the highlighted text that in Vue a directive must\nbe prefixed. The default prefix for directives is the letter 'v' followed by the\ndirective name/id.",[107,500,502],{"id":501},"parts-of-a-directive","Parts of a directive",[504,505,507],"h3",{"id":506},"expression","Expression",[11,509,510],{},"Directives can take in a value. Take this code for example:",[121,512,516],{"className":513,"code":514,"language":515,"meta":54,"style":54},"language-html shiki shiki-themes github-dark","\u003Cdiv v-text=\"message\">\u003C/div>\n","html",[36,517,518],{"__ignoreMap":54},[129,519,520,524,528,532,535,539,542,544],{"class":131,"line":132},[129,521,523],{"class":522},"s95oV","\u003C",[129,525,527],{"class":526},"s4JwU","div",[129,529,531],{"class":530},"svObZ"," v-text",[129,533,534],{"class":522},"=",[129,536,538],{"class":537},"sU2Wk","\"message\"",[129,540,541],{"class":522},">\u003C/",[129,543,527],{"class":526},[129,545,546],{"class":522},">\n",[11,548,549,550,555,556,561],{},"Here we are using the ",[484,551,552],{},[36,553,554],{},"v-text"," directive. The expression we are using is\n",[484,557,558],{},[36,559,560],{},"message",", which is referring to a property on the Vue instance.",[11,563,564],{},"In addition to binding to just a single value, directives can take in an\nexpression.",[121,566,568],{"className":513,"code":567,"language":515,"meta":54,"style":54},"\u003Cdiv v-text=\"'hello ' + user.firstName + ' ' + user.lastName\">\u003C/div>\n",[36,569,570],{"__ignoreMap":54},[129,571,572,574,576,578,580,583,585,587],{"class":131,"line":132},[129,573,523],{"class":522},[129,575,527],{"class":526},[129,577,531],{"class":530},[129,579,534],{"class":522},[129,581,582],{"class":537},"\"'hello ' + user.firstName + ' ' + user.lastName\"",[129,584,541],{"class":522},[129,586,527],{"class":526},[129,588,546],{"class":522},[11,590,591,592,595],{},"In the above code, we have passed in an entire string that depends on multiple\nproperties of the Vue instance. Whenever one of those properties changes, the\ntext will be updated. To prevent using too much logic inside of directive\nexpressions, we are limited to using ",[461,593,594],{},"one statement"," only. That might seem\nlike an annoyance, but realistically we have better ways of handling complex\nlogic, like computed properties.",[504,597,599],{"id":598},"argument","Argument",[11,601,602,603,606,607,611,612,617],{},"Arguments in Vue directives are ways we can adjust the functionality of a\nparticular directive. An argument is passed to a directive after the ",[36,604,605],{},":",". For\nexample, with the ",[484,608,609],{},[36,610,494],{}," directive we pass an argument telling Vue which event\nto listen to. Eg: ",[484,613,614],{},[36,615,616],{},"v-on:click",".",[504,619,621],{"id":620},"modifiers","Modifiers",[11,623,624,625,630,631,635,636,641],{},"Directives can also have modifiers to add more functionality changes. Again as\nan example, we can add the ",[484,626,627],{},[36,628,629],{},"stop"," modifier to the ",[484,632,633],{},[36,634,494],{}," directive to stop\nevent propagation. Vue has other built in modifiers that can be really helpful.\nSome of the more helpful ones are on the ",[484,637,638],{},[36,639,640],{},"keyup"," event. See below for an\nexample.",[121,643,645],{"className":513,"code":644,"language":515,"meta":54,"style":54},"\u003Cinput v-on:keyup.enter=\"submit\" />\n",[36,646,647],{"__ignoreMap":54},[129,648,649,651,654,657,659,662],{"class":131,"line":132},[129,650,523],{"class":522},[129,652,653],{"class":526},"input",[129,655,656],{"class":530}," v-on:keyup.enter",[129,658,534],{"class":522},[129,660,661],{"class":537},"\"submit\"",[129,663,664],{"class":522}," />\n",[11,666,667],{},"The above code listens to the keyup event, but only on the 'Enter' key. This\nmakes things really easy to use and prevents the developer from needing to write\ntheir own logic to handle this common problem.",[11,669,670,671,676],{},"See\n",[15,672,675],{"href":673,"rel":674},"https://vuejs.org/v2/guide/events.html#Event-Modifiers",[19],"this page of the documentation","\nfor more information about event modifiers.",[196,678,679],{},"html pre.shiki code .s95oV, html code.shiki .s95oV{--shiki-default:#E1E4E8}html pre.shiki code .s4JwU, html code.shiki .s4JwU{--shiki-default:#85E89D}html pre.shiki code .svObZ, html code.shiki .svObZ{--shiki-default:#B392F0}html pre.shiki code .sU2Wk, html code.shiki .sU2Wk{--shiki-default:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"title":54,"searchDepth":63,"depth":63,"links":681},[682,683],{"id":467,"depth":63,"text":468},{"id":501,"depth":63,"text":502,"children":684},[685,686,687],{"id":506,"depth":143,"text":507},{"id":598,"depth":143,"text":599},{"id":620,"depth":143,"text":621},"2021-08-02T00:00:00.000Z","Directives are a huge part of Vue, so it is important that we understand them as developers. Not only are they an essential part of the Vue framework out of the box, but by understanding them more fully we can create more powerful functionality in our apps.","images/mountain.jpg",{"alt":692},"understanding vue directives","/blog/understanding-vue-directives",{"title":454,"description":689},"blog/understanding-vue-directives","WnPK01gM0b859jhOTKaskNglb9wK6NyZfw7511BcHPo",{"id":698,"title":699,"body":700,"date":1414,"description":1415,"extension":67,"img":1416,"meta":1417,"navigation":71,"path":1422,"published":71,"seo":1423,"stem":1424,"tags":211,"__hash__":1425},"blog/blog/nuxt-content.md","Learning about Nuxt Content",{"type":8,"value":701,"toc":1407},[702,705,709,712,715,719,730,737,740,777,780,785,839,844,894,898,913,916,948,951,958,1026,1030,1033,1117,1123,1401,1404],[11,703,704],{},"Nuxt by itself is a powerful tool for creating websites and applications. Part\nof what makes it powerful is the ability it gives us to use modules to enhance\nthe capabilities of the framework.",[107,706,708],{"id":707},"nuxt-content","Nuxt Content",[11,710,711],{},"A popular Nuxt module is the Nuxt/Content module. The Nuxt content module allows\nyou to fetch content from different file types and import it into your site.\nThis gives you what is essentially a git based CMS (content management system).",[11,713,714],{},"After you’ve installed the Nuxt/Content module into your Nuxt project, you can\nstart using it by adding a content folder at the root of the project. Inside\nthis folder you can add Markdown, JSON, YAML, CSV, and XML files which will be\nparsed and made available in the rest of your project. You can even separate\ndifferent types of content within the content directory. For example, if you are\nbuilding out a personal portfolio page/blog, you can have sub-directories for\nyour projects and also one for your blog posts.",[504,716,718],{"id":717},"getting-started","Getting Started",[11,720,721,722,725,726,729],{},"With that, let’s create the content folder in our example app a tthe root of the\nproject. Let’s add an ",[36,723,724],{},"index.md"," and an ",[36,727,728],{},"about.md"," page inside of there.",[11,731,732],{},[733,734],"img",{"alt":735,"src":736},"content folder structure","/nuxt-content-blog/content-folder.png",[11,738,739],{},"Inside of our markdown files we can add some YAML code to attach some properties\nto each file if we want. This YAML code at the top of markdown files is called\n“Front Matter” and must be the first thing in the file. For example, I want each\npage to have a title and a description, this is where I would add that.",[121,741,745],{"className":742,"code":743,"language":744,"meta":54,"style":54},"language-yml shiki shiki-themes github-dark","---\ntitle: Home\ndescription: This is my homepage\n---\n","yml",[36,746,747,752,763,773],{"__ignoreMap":54},[129,748,749],{"class":131,"line":132},[129,750,751],{"class":530},"---\n",[129,753,754,757,760],{"class":131,"line":63},[129,755,756],{"class":526},"title",[129,758,759],{"class":522},": ",[129,761,762],{"class":537},"Home\n",[129,764,765,768,770],{"class":131,"line":143},[129,766,767],{"class":526},"description",[129,769,759],{"class":522},[129,771,772],{"class":537},"This is my homepage\n",[129,774,775],{"class":131,"line":149},[129,776,751],{"class":530},[11,778,779],{},"Below the front matter, I can now add my article/blog content.",[11,781,782,783],{},"Here is the content for ",[36,784,724],{},[121,786,789],{"className":787,"code":788,"language":67,"meta":54,"style":54},"language-md shiki shiki-themes github-dark","---\ntitle: Home\ndescription: This is my homepage\n---\n\n## Welcome\n\nYou can edit me in \u003Ccode>content/index.md\u003C/code>.\n\nSame for the [about](/about) page!\n",[36,790,791,795,800,805,809,813,818,822,828,833],{"__ignoreMap":54},[129,792,793],{"class":131,"line":132},[129,794,751],{},[129,796,797],{"class":131,"line":63},[129,798,799],{},"title: Home\n",[129,801,802],{"class":131,"line":143},[129,803,804],{},"description: This is my homepage\n",[129,806,807],{"class":131,"line":149},[129,808,751],{},[129,810,811],{"class":131,"line":155},[129,812,334],{"emptyLinePlaceholder":71},[129,814,815],{"class":131,"line":347},[129,816,817],{},"## Welcome\n",[129,819,820],{"class":131,"line":352},[129,821,334],{"emptyLinePlaceholder":71},[129,823,825],{"class":131,"line":824},8,[129,826,827],{},"You can edit me in \u003Ccode>content/index.md\u003C/code>.\n",[129,829,831],{"class":131,"line":830},9,[129,832,334],{"emptyLinePlaceholder":71},[129,834,836],{"class":131,"line":835},10,[129,837,838],{},"Same for the [about](/about) page!\n",[11,840,841,842],{},"And here is the content for ",[36,843,728],{},[121,845,847],{"className":787,"code":846,"language":67,"meta":54,"style":54},"---\ntitle: About\ndescription: This is my About page\n---\n\n# About page\n\nI am the about page, you can edit me in \u003Ccode>content/about.md\u003C/code>\n\nLink to [home](/)\n",[36,848,849,853,858,863,867,871,876,880,885,889],{"__ignoreMap":54},[129,850,851],{"class":131,"line":132},[129,852,751],{},[129,854,855],{"class":131,"line":63},[129,856,857],{},"title: About\n",[129,859,860],{"class":131,"line":143},[129,861,862],{},"description: This is my About page\n",[129,864,865],{"class":131,"line":149},[129,866,751],{},[129,868,869],{"class":131,"line":155},[129,870,334],{"emptyLinePlaceholder":71},[129,872,873],{"class":131,"line":347},[129,874,875],{},"# About page\n",[129,877,878],{"class":131,"line":352},[129,879,334],{"emptyLinePlaceholder":71},[129,881,882],{"class":131,"line":824},[129,883,884],{},"I am the about page, you can edit me in \u003Ccode>content/about.md\u003C/code>\n",[129,886,887],{"class":131,"line":830},[129,888,334],{"emptyLinePlaceholder":71},[129,890,891],{"class":131,"line":835},[129,892,893],{},"Link to [home](/)\n",[107,895,897],{"id":896},"getting-access-to-the-content","Getting Access to the Content",[11,899,900,901,904,905,908,909],{},"Now that we’ve written our content, we need to get access to that content inside\nof our app. First, create a ",[36,902,903],{},"_slug.vue"," file in the ",[36,906,907],{},"pages"," folder of the\nproject. ",[733,910],{"alt":911,"src":912},"pages folder structure","/nuxt-content-blog/slug-file.png",[11,914,915],{},"To do this we will use the asyncData method provided by Nuxt. The Nuxt/Content\nmodule injects the $content instance into the app, so we can destructure it from\nthe context object argument on asyncData along with the params object. Using the\nparams object we can grab the slug, or path name from the url. Let’s assign that\nto a constant called slug.",[121,917,921],{"className":918,"code":919,"language":920,"meta":54,"style":54},"language-js shiki shiki-themes github-dark","async asyncData({ $content, params, error }) {\n    const slug = params.slug || \"index\";\n    return\n  },\n};\n","js",[36,922,923,928,933,938,943],{"__ignoreMap":54},[129,924,925],{"class":131,"line":132},[129,926,927],{},"async asyncData({ $content, params, error }) {\n",[129,929,930],{"class":131,"line":63},[129,931,932],{},"    const slug = params.slug || \"index\";\n",[129,934,935],{"class":131,"line":143},[129,936,937],{},"    return\n",[129,939,940],{"class":131,"line":149},[129,941,942],{},"  },\n",[129,944,945],{"class":131,"line":155},[129,946,947],{},"};\n",[11,949,950],{},"Now we want to get the page content. To do this, we use the $content instance to\nfetch the page by passing in the file path of the page we want, which we’ve\nstored in our slug constant, and then calling fetch on that. For good measure,\nwe’ve added a catch function in case it can’t find the page. Once that is\nfetched, it will then return out into our component properties.",[11,952,953,954,957],{},"Your ",[36,955,956],{},"asyncData"," function should look like this now:",[121,959,961],{"className":918,"code":960,"language":920,"meta":54,"style":54},"async asyncData({ $content, params, error }) {\n    const slug = params.slug || \"index\";\n    const page = await $content(slug)\n      .fetch()\n      .catch((err) => {\n        error({ statusCode: 404, message: \"Page not found\" });\n      });\n\n    return {\n      page,\n    };\n  },\n};\n",[36,962,963,967,971,976,981,986,991,996,1000,1005,1010,1016,1021],{"__ignoreMap":54},[129,964,965],{"class":131,"line":132},[129,966,927],{},[129,968,969],{"class":131,"line":63},[129,970,932],{},[129,972,973],{"class":131,"line":143},[129,974,975],{},"    const page = await $content(slug)\n",[129,977,978],{"class":131,"line":149},[129,979,980],{},"      .fetch()\n",[129,982,983],{"class":131,"line":155},[129,984,985],{},"      .catch((err) => {\n",[129,987,988],{"class":131,"line":347},[129,989,990],{},"        error({ statusCode: 404, message: \"Page not found\" });\n",[129,992,993],{"class":131,"line":352},[129,994,995],{},"      });\n",[129,997,998],{"class":131,"line":824},[129,999,334],{"emptyLinePlaceholder":71},[129,1001,1002],{"class":131,"line":830},[129,1003,1004],{},"    return {\n",[129,1006,1007],{"class":131,"line":835},[129,1008,1009],{},"      page,\n",[129,1011,1013],{"class":131,"line":1012},11,[129,1014,1015],{},"    };\n",[129,1017,1019],{"class":131,"line":1018},12,[129,1020,942],{},[129,1022,1024],{"class":131,"line":1023},13,[129,1025,947],{},[107,1027,1029],{"id":1028},"displaying-the-content","Displaying the Content",[11,1031,1032],{},"So now we have the page content available on our page component. We just need to\ndisplay that content. For each page, we will want to display the title and\ndescription we put into the front matter of each markdown file. With the rest of\nthe page content, we pass that into the nuxt-content component as the document\nproperty. That will then display our page content.",[121,1034,1036],{"className":513,"code":1035,"language":515,"meta":54,"style":54},"\u003Ctemplate>\n  \u003Cdiv>\n    \u003Ch1>{{ page.title }}\u003C/h1>\n    \u003Cp>{{ page.description }}\u003C/p>\n    \u003Cnuxt-content :document=\"page\" />\n  \u003C/div>\n\u003C/template>\n",[36,1037,1038,1047,1056,1070,1083,1099,1108],{"__ignoreMap":54},[129,1039,1040,1042,1045],{"class":131,"line":132},[129,1041,523],{"class":522},[129,1043,1044],{"class":526},"template",[129,1046,546],{"class":522},[129,1048,1049,1052,1054],{"class":131,"line":63},[129,1050,1051],{"class":522},"  \u003C",[129,1053,527],{"class":526},[129,1055,546],{"class":522},[129,1057,1058,1061,1063,1066,1068],{"class":131,"line":143},[129,1059,1060],{"class":522},"    \u003C",[129,1062,83],{"class":526},[129,1064,1065],{"class":522},">{{ page.title }}\u003C/",[129,1067,83],{"class":526},[129,1069,546],{"class":522},[129,1071,1072,1074,1076,1079,1081],{"class":131,"line":149},[129,1073,1060],{"class":522},[129,1075,11],{"class":526},[129,1077,1078],{"class":522},">{{ page.description }}\u003C/",[129,1080,11],{"class":526},[129,1082,546],{"class":522},[129,1084,1085,1087,1089,1092,1094,1097],{"class":131,"line":155},[129,1086,1060],{"class":522},[129,1088,707],{"class":526},[129,1090,1091],{"class":530}," :document",[129,1093,534],{"class":522},[129,1095,1096],{"class":537},"\"page\"",[129,1098,664],{"class":522},[129,1100,1101,1104,1106],{"class":131,"line":347},[129,1102,1103],{"class":522},"  \u003C/",[129,1105,527],{"class":526},[129,1107,546],{"class":522},[129,1109,1110,1113,1115],{"class":131,"line":352},[129,1111,1112],{"class":522},"\u003C/",[129,1114,1044],{"class":526},[129,1116,546],{"class":522},[11,1118,1119,1120,1122],{},"The full ",[36,1121,903],{}," file should look like this:",[121,1124,1126],{"className":513,"code":1125,"language":515,"meta":54,"style":54},"\u003Ctemplate>\n  \u003Cdiv>\n    \u003Ch1>{{ page.title }}\u003C/h1>\n    \u003Cp>{{ page.description }}\u003C/p>\n    \u003Cnuxt-content :document=\"page\" />\n  \u003C/div>\n\u003C/template>\n\n\u003Cscript>\n  export default {\n    async asyncData({ $content, params, error }) {\n      const slug = params.slug || \"index\";\n      const page = await $content(slug)\n        .fetch()\n        .catch((err) => {\n          error({ statusCode: 404, message: \"Page not found\" });\n        });\n\n      return {\n        page,\n      };\n    },\n  };\n\u003C/script>\n",[36,1127,1128,1136,1144,1156,1168,1182,1190,1198,1202,1211,1223,1252,1276,1294,1306,1328,1349,1355,1360,1368,1374,1380,1386,1392],{"__ignoreMap":54},[129,1129,1130,1132,1134],{"class":131,"line":132},[129,1131,523],{"class":522},[129,1133,1044],{"class":526},[129,1135,546],{"class":522},[129,1137,1138,1140,1142],{"class":131,"line":63},[129,1139,1051],{"class":522},[129,1141,527],{"class":526},[129,1143,546],{"class":522},[129,1145,1146,1148,1150,1152,1154],{"class":131,"line":143},[129,1147,1060],{"class":522},[129,1149,83],{"class":526},[129,1151,1065],{"class":522},[129,1153,83],{"class":526},[129,1155,546],{"class":522},[129,1157,1158,1160,1162,1164,1166],{"class":131,"line":149},[129,1159,1060],{"class":522},[129,1161,11],{"class":526},[129,1163,1078],{"class":522},[129,1165,11],{"class":526},[129,1167,546],{"class":522},[129,1169,1170,1172,1174,1176,1178,1180],{"class":131,"line":155},[129,1171,1060],{"class":522},[129,1173,707],{"class":526},[129,1175,1091],{"class":530},[129,1177,534],{"class":522},[129,1179,1096],{"class":537},[129,1181,664],{"class":522},[129,1183,1184,1186,1188],{"class":131,"line":347},[129,1185,1103],{"class":522},[129,1187,527],{"class":526},[129,1189,546],{"class":522},[129,1191,1192,1194,1196],{"class":131,"line":352},[129,1193,1112],{"class":522},[129,1195,1044],{"class":526},[129,1197,546],{"class":522},[129,1199,1200],{"class":131,"line":824},[129,1201,334],{"emptyLinePlaceholder":71},[129,1203,1204,1206,1209],{"class":131,"line":830},[129,1205,523],{"class":522},[129,1207,1208],{"class":526},"script",[129,1210,546],{"class":522},[129,1212,1213,1217,1220],{"class":131,"line":835},[129,1214,1216],{"class":1215},"snl16","  export",[129,1218,1219],{"class":1215}," default",[129,1221,1222],{"class":522}," {\n",[129,1224,1225,1228,1231,1234,1238,1241,1244,1246,1249],{"class":131,"line":1012},[129,1226,1227],{"class":1215},"    async",[129,1229,1230],{"class":530}," asyncData",[129,1232,1233],{"class":522},"({ ",[129,1235,1237],{"class":1236},"s9osk","$content",[129,1239,1240],{"class":522},", ",[129,1242,1243],{"class":1236},"params",[129,1245,1240],{"class":522},[129,1247,1248],{"class":1236},"error",[129,1250,1251],{"class":522}," }) {\n",[129,1253,1254,1257,1261,1264,1267,1270,1273],{"class":131,"line":1018},[129,1255,1256],{"class":1215},"      const",[129,1258,1260],{"class":1259},"sDLfK"," slug",[129,1262,1263],{"class":1215}," =",[129,1265,1266],{"class":522}," params.slug ",[129,1268,1269],{"class":1215},"||",[129,1271,1272],{"class":537}," \"index\"",[129,1274,1275],{"class":522},";\n",[129,1277,1278,1280,1283,1285,1288,1291],{"class":131,"line":1023},[129,1279,1256],{"class":1215},[129,1281,1282],{"class":1259}," page",[129,1284,1263],{"class":1215},[129,1286,1287],{"class":1215}," await",[129,1289,1290],{"class":530}," $content",[129,1292,1293],{"class":522},"(slug)\n",[129,1295,1297,1300,1303],{"class":131,"line":1296},14,[129,1298,1299],{"class":522},"        .",[129,1301,1302],{"class":530},"fetch",[129,1304,1305],{"class":522},"()\n",[129,1307,1309,1311,1314,1317,1320,1323,1326],{"class":131,"line":1308},15,[129,1310,1299],{"class":522},[129,1312,1313],{"class":530},"catch",[129,1315,1316],{"class":522},"((",[129,1318,1319],{"class":1236},"err",[129,1321,1322],{"class":522},") ",[129,1324,1325],{"class":1215},"=>",[129,1327,1222],{"class":522},[129,1329,1331,1334,1337,1340,1343,1346],{"class":131,"line":1330},16,[129,1332,1333],{"class":530},"          error",[129,1335,1336],{"class":522},"({ statusCode: ",[129,1338,1339],{"class":1259},"404",[129,1341,1342],{"class":522},", message: ",[129,1344,1345],{"class":537},"\"Page not found\"",[129,1347,1348],{"class":522}," });\n",[129,1350,1352],{"class":131,"line":1351},17,[129,1353,1354],{"class":522},"        });\n",[129,1356,1358],{"class":131,"line":1357},18,[129,1359,334],{"emptyLinePlaceholder":71},[129,1361,1363,1366],{"class":131,"line":1362},19,[129,1364,1365],{"class":1215},"      return",[129,1367,1222],{"class":522},[129,1369,1371],{"class":131,"line":1370},20,[129,1372,1373],{"class":522},"        page,\n",[129,1375,1377],{"class":131,"line":1376},21,[129,1378,1379],{"class":522},"      };\n",[129,1381,1383],{"class":131,"line":1382},22,[129,1384,1385],{"class":522},"    },\n",[129,1387,1389],{"class":131,"line":1388},23,[129,1390,1391],{"class":522},"  };\n",[129,1393,1395,1397,1399],{"class":131,"line":1394},24,[129,1396,1112],{"class":522},[129,1398,1208],{"class":526},[129,1400,546],{"class":522},[11,1402,1403],{},"As you can see, the nuxt content module has made it really easy to add a git\nbased CMS to your sites. This has been a really brief introduction to the\nmodule. I would encourage you to look at the docs to learn more and better\nunderstand the different use cases for it.",[196,1405,1406],{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html pre.shiki code .svObZ, html code.shiki .svObZ{--shiki-default:#B392F0}html pre.shiki code .s4JwU, html code.shiki .s4JwU{--shiki-default:#85E89D}html pre.shiki code .s95oV, html code.shiki .s95oV{--shiki-default:#E1E4E8}html pre.shiki code .sU2Wk, html code.shiki .sU2Wk{--shiki-default:#9ECBFF}html pre.shiki code .snl16, html code.shiki .snl16{--shiki-default:#F97583}html pre.shiki code .s9osk, html code.shiki .s9osk{--shiki-default:#FFAB70}html pre.shiki code .sDLfK, html code.shiki .sDLfK{--shiki-default:#79B8FF}",{"title":54,"searchDepth":63,"depth":63,"links":1408},[1409,1412,1413],{"id":707,"depth":63,"text":708,"children":1410},[1411],{"id":717,"depth":143,"text":718},{"id":896,"depth":63,"text":897},{"id":1028,"depth":63,"text":1029},"2021-08-01T00:00:00.000Z","Nuxt Content is a powerful module that allows you to fetch content from different file types and import it into your site. This gives you the ability to add a git based CMS (content management system) to your project.","books.jpg",{"alt":1418,"photographerLink":1419,"unsplashLink":1420,"photographer":1421},"learning about nuxt-content","https://unsplash.com/@kimberlyfarmer?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText","https://unsplash.com/s/photos/blog?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText","Kimberly Farmer","/blog/nuxt-content",{"title":699,"description":1415},"blog/nuxt-content","Mo4gDJjyGHLathMivpJcLxsiPBLl3_CdYKmtFKrg3sg",{"id":1427,"title":1428,"body":1429,"date":1449,"description":1450,"extension":67,"img":1451,"meta":1452,"navigation":71,"path":1453,"published":71,"seo":1454,"stem":1455,"tags":211,"__hash__":1456},"blog/blog/vue-component-library.md","How to Create and Publish a Vue Component Library",{"type":8,"value":1430,"toc":1447},[1431,1439],[11,1432,1433,1434,617],{},"I published a blog post several years ago on freeCodeCamp about\n",[15,1435,1438],{"href":1436,"rel":1437},"https://www.freecodecamp.org/news/how-to-create-and-publish-a-vue-component-library/",[19],"how to create a Vue component library",[11,1440,1441,1442,617],{},"It is outdated now, but there is a more updated one\n",[15,1443,1446],{"href":1444,"rel":1445},"https://www.freecodecamp.org/news/how-to-create-and-publish-a-vue-component-library-update/",[19],"here",{"title":54,"searchDepth":63,"depth":63,"links":1448},[],"2020-07-22T00:00:00.000Z","A guide to creating and publishing a Vue component library.","images/library.png",{"alt":447},"/blog/vue-component-library",{"title":1428,"description":1450},"blog/vue-component-library","iNWduEdPDJ0Du_X2Nx7-2RmcwRsUvS0Jm--MIdy9zn8",1750541626475]